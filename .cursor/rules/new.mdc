---
alwaysApply: true
---

# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Предпочтения пользователя

- **Стиль коммуникации**: Прямой, экспертный уровень. Код и объяснения без "вот как вы можете..." воды
- **Язык**: Отвечать на русском языке
- **Окружение**: Windows
- **Подход**: Краткость, предвосхищение потребностей, обращение как к эксперту, аргументы важнее авторитета
- **Безопасность**: При обновлении кодовой базы на 100% убедиться, что ничего не сломается

## Обзор проекта

**Fuel Tracker** - MVP приложение для отслеживания расхода топлива транспортных средств. Состоит из:
- **Backend**: Django REST Framework (fuel-tracker-backend/)
- **Frontend**: React + Vite + Zustand (fuel-tracker-frontend/)

### Основные документы
- [docs/brd.md](docs/brd.md) - Бизнес-требования
- [docs/arch.md](docs/arch.md) - Архитектура
- [docs/rest-api.md](docs/rest-api.md) - REST API спецификация
- [docs/test-cases.md](docs/test-cases.md) - Тестовые сценарии
- [docs/roadmap.md](docs/roadmap.md) - План разработки

## Backend (Django REST Framework)

### Структура приложения

```
fuel-tracker-backend/
├── fuel_tracker/         # Основной проект Django
│   ├── settings.py       # Настройки (окружение через python-decouple)
│   ├── urls.py           # Корневая маршрутизация
│   ├── middleware.py     # Кастомные middleware (CorrelationId, Logging, Security)
│   └── exceptions.py     # Обработка исключений
├── api/                  # API приложение (vehicles, fuel entries, statistics)
│   ├── models.py         # Vehicle, FuelEntry
│   ├── serializers.py    # DRF сериализаторы
│   ├── views.py          # ViewSets и API views
│   ├── services.py       # Бизнес-логика (расчёт метрик, статистика)
│   ├── permissions.py    # IsOwner permission
│   └── tests*.py         # Тесты (91% coverage)
├── users/                # Пользователи и аутентификация
│   ├── models.py         # Кастомная модель User
│   ├── serializers.py    # Сериализаторы для auth и профиля
│   ├── views.py          # SignUp, SignIn, SignOut
│   ├── backends.py       # Email authentication backend
│   └── tests.py          # Тесты
└── docker-compose.yml    # Postgres + Redis + App
```

### Ключевые команды

```bash
# Запуск (Docker)
docker-compose up

# Локальная разработка (Windows)
.\venv\Scripts\activate
python manage.py runserver

# Миграции
python manage.py migrate
python manage.py makemigrations

# Тесты
python manage.py test                                    # Все тесты
python manage.py test api                                # Тесты API
python manage.py test api.tests.TestFuelEntryAPI         # Конкретный тест-класс
python manage.py test api.tests.TestFuelEntryAPI.test_create_entry  # Конкретный тест

# Генерация тестовых данных
docker-compose exec app python manage.py seed_dev_data
docker-compose exec app python manage.py seed_dev_data --clear

# OpenAPI схема
python manage.py spectacular --color --file schema.yml

# Coverage
coverage run --source='.' manage.py test
coverage report
coverage html  # htmlcov/index.html
```

### Архитектурные принципы

1. **Изоляция данных (Row-Level Security)**: Все QuerySet'ы фильтруются по `user=request.user` в `get_queryset()` ViewSet'ов
2. **Слой сервисов**: Бизнес-логика инкапсулирована в `api/services.py` (не в моделях/view)
3. **Каскадные пересчёты**: Изменение/удаление FuelEntry триггерит пересчёт зависимых метрик через `FuelEntryService.recalculate_metrics()`
4. **Хранение в метрике**: Все данные (км, литры) хранятся в метрических единицах. Конвертация в Imperial происходит при сериализации
5. **Кэширование**: Redis для dashboard statistics (TTL 60s)

### Бизнес-правила

- **Одометр**: Монотонно возрастающий для каждого Vehicle. Валидация в `FuelEntrySerializer.validate_odometer()`
- **Baseline entry**: Первая запись для Vehicle не имеет вычисляемых метрик (distance_since_last=NULL)
- **Метрики**: `unit_price`, `distance_since_last`, `consumption_l_100km`, `cost_per_km` вычисляются автоматически в `FuelEntryService.calculate_entry_metrics()`
- **Транзакционность**: Все операции create/update/delete выполняются в БД-транзакциях

### База данных

- **PostgreSQL** с композитными индексами для оптимизации (см. `api/models.py` Meta.indexes)
- **Миграции**: Применяются автоматически при старте контейнера (`docker-compose.yml`)
- **Seed данные**: `python manage.py seed_dev_data` создаёт demo@example.com / demo123 и test@example.com / test123

### Аутентификация

- **Session-based** с CSRF токенами (DRF SessionAuthentication)
- **Email backend**: Пользователи логинятся через email (не username). См. `users/backends.py`
- **Rate limiting**: 5 req/min для auth endpoints (защита от brute force)

### API Documentation

- **Swagger UI**: http://localhost:8000/api/v1/schema/swagger-ui/
- **ReDoc**: http://localhost:8000/api/v1/schema/redoc/
- **OpenAPI YAML**: http://localhost:8000/api/v1/schema/

### Безопасность

- CORS: Whitelist origins через `CORS_ALLOWED_ORIGINS` env
- Security Headers: HSTS, X-Content-Type-Options, X-Frame-Options, Referrer-Policy
- Логирование: Correlation ID, security events, централизованные логи в `logs/`
- GDPR: Export (`GET /api/v1/users/me/export`) и deletion (`DELETE /api/v1/users/me`)

### Тестирование

- **55 автоматических тестов** с **91% покрытием**
- Тесты организованы: `tests.py`, `tests_vehicles.py`, `tests_fuel_entries.py`, `tests_services.py`
- Используют Django TestCase с setUpTestData для фикстур

## Frontend (React + Vite + Zustand)

### Структура приложения (FSD - Feature-Sliced Design)

```
fuel-tracker-frontend/src/
├── app/                  # Инициализация приложения
│   ├── providers/        # QueryProvider, AuthProvider
│   ├── router/           # React Router + ProtectedRoute
│   └── stores/           # Zustand stores (authStore, vehicleStore, userSettingsStore)
├── pages/                # Страницы (Auth, NotFound, Dashboard и т.д.)
├── features/             # Фичи (auth, user-settings, vehicles, fuel-entries)
│   ├── auth/
│   │   ├── api/          # authApi.ts
│   │   ├── ui/           # SignInForm, SignUpForm
│   │   ├── model/        # useAuth.ts
│   │   └── lib/          # authSchemas.ts (Zod validation)
│   └── ...
├── entities/             # Бизнес-сущности (user, vehicle, fuel-entry, statistics)
│   ├── user/
│   │   ├── api/          # userApi.ts
│   │   └── model/        # types.ts
│   └── ...
├── shared/               # Общие ресурсы
│   ├── ui/               # shadcn/ui компоненты
│   ├── api/              # Axios instance, base API setup
│   ├── lib/
│   │   ├── utils/        # formatters, validators, converters
│   │   └── constants/    # routes, units
│   └── hooks/            # use-toast, use-mobile
└── widgets/              # Композитные UI компоненты
```

### Ключевые команды

```bash
cd fuel-tracker-frontend

# Разработка
npm run dev                # Vite dev server (http://localhost:3000)

# Сборка
npm run build              # Production build
npm run build:dev          # Development build

# Тесты
npm run test               # Vitest
npm run test:ui            # Vitest UI
npm run test:coverage      # Coverage report

# Линтинг
npm run lint               # ESLint

# Превью
npm run preview            # Preview production build
```

### Стек технологий

- **React 18** + **TypeScript**
- **Vite** (build tool)
- **React Router** v6
- **Zustand** (state management)
- **TanStack Query** (server state)
- **Axios** (HTTP client)
- **Zod** (validation)
- **React Hook Form** (forms)
- **shadcn/ui** (UI components, based on Radix UI)
- **Tailwind CSS** (styling)
- **Vitest** + **Testing Library** (testing)

### State Management (Zustand)

- **authStore**: Аутентификация, текущий пользователь
- **vehicleStore**: Список автомобилей
- **userSettingsStore**: Предпочтения пользователя (units, currency, timezone)

**Принципы**:
- Colocated actions and state внутри store
- Persist middleware для authStore (localStorage)
- Селекторы для computed values

### API Integration (TanStack Query)

- Все API вызовы через `@tanstack/react-query`
- `queryClient` настроен в `app/providers/QueryProvider.tsx`
- Axios instance в `shared/api/index.ts` с CSRF token handling
- API методы в `entities/{entity}/api/` и `features/{feature}/api/`

### Routing

- React Router v6 в `app/router/index.tsx`
- `ProtectedRoute` для приватных страниц (проверка auth)
- Routes: `/`, `/auth`, `/dashboard`, `/vehicles`, `/fuel-entries`, `/settings`

### Forms & Validation

- **React Hook Form** + **Zod** для валидации
- Схемы валидации в `features/{feature}/lib/`
- shadcn/ui Form компоненты с автоматическими ошибками

### Styling

- **Tailwind CSS** - основной способ стилизации
- **CSS Modules / SASS** - не используются, только Tailwind
- **shadcn/ui** - компоненты уже стилизованы через Tailwind
- **Темы**: поддержка через `next-themes` (light/dark)

## Общие правила

### Roadmap Compliance

- **ВСЕГДА** следовать плану из `docs/roadmap.md`
- Перед началом работы понять, какой шаг нужно выполнить
- После завершения задачи редактировать `docs/roadmap.md`, отмечая выполненные шаги галочкой
- В конце ответа писать: **"🔄Roadmap has been updated"** + список выполненных шагов в формате `[X] Step name`
- Не опережать roadmap: реализовывать только то, что явно запрошено

### Кодогенерация

- **Не дублировать код** (DRY principle)
- **Early returns** для читаемости
- **Descriptive names**: `handleClick`, `handleKeyDown` и т.д.
- **TypeScript**: всегда типизировать
- **Accessibility**: tabindex, aria-label, on:click, on:keydown
- **Consts вместо functions**: `const toggle = () => { ... }`

### Безопасность

- НЕ ломать существующий функционал
- НЕ создавать уязвимости (XSS, CSRF, SQL injection)
- НЕ экспонировать стектрейсы пользователям
- Валидация на клиенте И сервере
- Строгая изоляция данных пользователей

### Production-Ready

Код должен быть готов к деплою завтра. Новая команда начнёт работу послезавтра. Архитектура должна быть:
- Понятной
- Простой (без over-engineering)
- Единообразной (похожие фичи реализованы одинаково)
- Безопасной (no data leaks, tenant isolation)

## Deployment

### Backend
```bash
git clone <repo>
cd fuel-tracker-backend
# Создать .env на основе env.example
docker-compose up
# API доступен на http://localhost:8000
```

### Frontend
```bash
git clone <repo>
cd fuel-tracker-frontend
npm install
npm run dev
# UI доступен на http://localhost:3000
```

## Переменные окружения

### Backend (.env)
```env
SECRET_KEY=your-secret-key-here
DEBUG=True
DB_NAME=fuel_tracker
DB_USER=fuel_user
DB_PASS=your-password
DB_HOST=localhost
DB_PORT=5432
REDIS_HOST=localhost
REDIS_PORT=6379
ALLOWED_HOSTS=localhost,127.0.0.1
CORS_ALLOWED_ORIGINS=http://localhost:3000
```

### Frontend (.env)
```env
VITE_API_URL=http://localhost:8000
```

## Дополнительно

- **Best practices**: Следовать DRF best practices из `fuel-tracker-backend/CLAUDE.md`
- **Zustand best practices**: Следовать Zustand best practices из `fuel-tracker-frontend/CLAUDE.md`
- **FSD architecture**: Соблюдать Feature-Sliced Design для frontend
- **No TODOs**: Код должен быть полностью реализован, без плейсхолдеров
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Предпочтения пользователя

- **Стиль коммуникации**: Прямой, экспертный уровень. Код и объяснения без "вот как вы можете..." воды
- **Язык**: Отвечать на русском языке
- **Окружение**: Windows
- **Подход**: Краткость, предвосхищение потребностей, обращение как к эксперту, аргументы важнее авторитета
- **Безопасность**: При обновлении кодовой базы на 100% убедиться, что ничего не сломается

## Обзор проекта

**Fuel Tracker** - MVP приложение для отслеживания расхода топлива транспортных средств. Состоит из:
- **Backend**: Django REST Framework (fuel-tracker-backend/)
- **Frontend**: React + Vite + Zustand (fuel-tracker-frontend/)

### Основные документы
- [docs/brd.md](docs/brd.md) - Бизнес-требования
- [docs/arch.md](docs/arch.md) - Архитектура
- [docs/rest-api.md](docs/rest-api.md) - REST API спецификация
- [docs/test-cases.md](docs/test-cases.md) - Тестовые сценарии
- [docs/roadmap.md](docs/roadmap.md) - План разработки

## Backend (Django REST Framework)

### Структура приложения

```
fuel-tracker-backend/
├── fuel_tracker/         # Основной проект Django
│   ├── settings.py       # Настройки (окружение через python-decouple)
│   ├── urls.py           # Корневая маршрутизация
│   ├── middleware.py     # Кастомные middleware (CorrelationId, Logging, Security)
│   └── exceptions.py     # Обработка исключений
├── api/                  # API приложение (vehicles, fuel entries, statistics)
│   ├── models.py         # Vehicle, FuelEntry
│   ├── serializers.py    # DRF сериализаторы
│   ├── views.py          # ViewSets и API views
│   ├── services.py       # Бизнес-логика (расчёт метрик, статистика)
│   ├── permissions.py    # IsOwner permission
│   └── tests*.py         # Тесты (91% coverage)
├── users/                # Пользователи и аутентификация
│   ├── models.py         # Кастомная модель User
│   ├── serializers.py    # Сериализаторы для auth и профиля
│   ├── views.py          # SignUp, SignIn, SignOut
│   ├── backends.py       # Email authentication backend
│   └── tests.py          # Тесты
└── docker-compose.yml    # Postgres + Redis + App
```

### Ключевые команды

```bash
# Запуск (Docker)
docker-compose up

# Локальная разработка (Windows)
.\venv\Scripts\activate
python manage.py runserver

# Миграции
python manage.py migrate
python manage.py makemigrations

# Тесты
python manage.py test                                    # Все тесты
python manage.py test api                                # Тесты API
python manage.py test api.tests.TestFuelEntryAPI         # Конкретный тест-класс
python manage.py test api.tests.TestFuelEntryAPI.test_create_entry  # Конкретный тест

# Генерация тестовых данных
docker-compose exec app python manage.py seed_dev_data
docker-compose exec app python manage.py seed_dev_data --clear

# OpenAPI схема
python manage.py spectacular --color --file schema.yml

# Coverage
coverage run --source='.' manage.py test
coverage report
coverage html  # htmlcov/index.html
```

### Архитектурные принципы

1. **Изоляция данных (Row-Level Security)**: Все QuerySet'ы фильтруются по `user=request.user` в `get_queryset()` ViewSet'ов
2. **Слой сервисов**: Бизнес-логика инкапсулирована в `api/services.py` (не в моделях/view)
3. **Каскадные пересчёты**: Изменение/удаление FuelEntry триггерит пересчёт зависимых метрик через `FuelEntryService.recalculate_metrics()`
4. **Хранение в метрике**: Все данные (км, литры) хранятся в метрических единицах. Конвертация в Imperial происходит при сериализации
5. **Кэширование**: Redis для dashboard statistics (TTL 60s)

### Бизнес-правила

- **Одометр**: Монотонно возрастающий для каждого Vehicle. Валидация в `FuelEntrySerializer.validate_odometer()`
- **Baseline entry**: Первая запись для Vehicle не имеет вычисляемых метрик (distance_since_last=NULL)
- **Метрики**: `unit_price`, `distance_since_last`, `consumption_l_100km`, `cost_per_km` вычисляются автоматически в `FuelEntryService.calculate_entry_metrics()`
- **Транзакционность**: Все операции create/update/delete выполняются в БД-транзакциях

### База данных

- **PostgreSQL** с композитными индексами для оптимизации (см. `api/models.py` Meta.indexes)
- **Миграции**: Применяются автоматически при старте контейнера (`docker-compose.yml`)
- **Seed данные**: `python manage.py seed_dev_data` создаёт demo@example.com / demo123 и test@example.com / test123

### Аутентификация

- **Session-based** с CSRF токенами (DRF SessionAuthentication)
- **Email backend**: Пользователи логинятся через email (не username). См. `users/backends.py`
- **Rate limiting**: 5 req/min для auth endpoints (защита от brute force)

### API Documentation

- **Swagger UI**: http://localhost:8000/api/v1/schema/swagger-ui/
- **ReDoc**: http://localhost:8000/api/v1/schema/redoc/
- **OpenAPI YAML**: http://localhost:8000/api/v1/schema/

### Безопасность

- CORS: Whitelist origins через `CORS_ALLOWED_ORIGINS` env
- Security Headers: HSTS, X-Content-Type-Options, X-Frame-Options, Referrer-Policy
- Логирование: Correlation ID, security events, централизованные логи в `logs/`
- GDPR: Export (`GET /api/v1/users/me/export`) и deletion (`DELETE /api/v1/users/me`)

### Тестирование

- **55 автоматических тестов** с **91% покрытием**
- Тесты организованы: `tests.py`, `tests_vehicles.py`, `tests_fuel_entries.py`, `tests_services.py`
- Используют Django TestCase с setUpTestData для фикстур

## Frontend (React + Vite + Zustand)

### Структура приложения (FSD - Feature-Sliced Design)

```
fuel-tracker-frontend/src/
├── app/                  # Инициализация приложения
│   ├── providers/        # QueryProvider, AuthProvider
│   ├── router/           # React Router + ProtectedRoute
│   └── stores/           # Zustand stores (authStore, vehicleStore, userSettingsStore)
├── pages/                # Страницы (Auth, NotFound, Dashboard и т.д.)
├── features/             # Фичи (auth, user-settings, vehicles, fuel-entries)
│   ├── auth/
│   │   ├── api/          # authApi.ts
│   │   ├── ui/           # SignInForm, SignUpForm
│   │   ├── model/        # useAuth.ts
│   │   └── lib/          # authSchemas.ts (Zod validation)
│   └── ...
├── entities/             # Бизнес-сущности (user, vehicle, fuel-entry, statistics)
│   ├── user/
│   │   ├── api/          # userApi.ts
│   │   └── model/        # types.ts
│   └── ...
├── shared/               # Общие ресурсы
│   ├── ui/               # shadcn/ui компоненты
│   ├── api/              # Axios instance, base API setup
│   ├── lib/
│   │   ├── utils/        # formatters, validators, converters
│   │   └── constants/    # routes, units
│   └── hooks/            # use-toast, use-mobile
└── widgets/              # Композитные UI компоненты
```

### Ключевые команды

```bash
cd fuel-tracker-frontend

# Разработка
npm run dev                # Vite dev server (http://localhost:3000)

# Сборка
npm run build              # Production build
npm run build:dev          # Development build

# Тесты
npm run test               # Vitest
npm run test:ui            # Vitest UI
npm run test:coverage      # Coverage report

# Линтинг
npm run lint               # ESLint

# Превью
npm run preview            # Preview production build
```

### Стек технологий

- **React 18** + **TypeScript**
- **Vite** (build tool)
- **React Router** v6
- **Zustand** (state management)
- **TanStack Query** (server state)
- **Axios** (HTTP client)
- **Zod** (validation)
- **React Hook Form** (forms)
- **shadcn/ui** (UI components, based on Radix UI)
- **Tailwind CSS** (styling)
- **Vitest** + **Testing Library** (testing)

### State Management (Zustand)

- **authStore**: Аутентификация, текущий пользователь
- **vehicleStore**: Список автомобилей
- **userSettingsStore**: Предпочтения пользователя (units, currency, timezone)

**Принципы**:
- Colocated actions and state внутри store
- Persist middleware для authStore (localStorage)
- Селекторы для computed values

### API Integration (TanStack Query)

- Все API вызовы через `@tanstack/react-query`
- `queryClient` настроен в `app/providers/QueryProvider.tsx`
- Axios instance в `shared/api/index.ts` с CSRF token handling
- API методы в `entities/{entity}/api/` и `features/{feature}/api/`

### Routing

- React Router v6 в `app/router/index.tsx`
- `ProtectedRoute` для приватных страниц (проверка auth)
- Routes: `/`, `/auth`, `/dashboard`, `/vehicles`, `/fuel-entries`, `/settings`

### Forms & Validation

- **React Hook Form** + **Zod** для валидации
- Схемы валидации в `features/{feature}/lib/`
- shadcn/ui Form компоненты с автоматическими ошибками

### Styling

- **Tailwind CSS** - основной способ стилизации
- **CSS Modules / SASS** - не используются, только Tailwind
- **shadcn/ui** - компоненты уже стилизованы через Tailwind
- **Темы**: поддержка через `next-themes` (light/dark)

## Общие правила

### Roadmap Compliance

- **ВСЕГДА** следовать плану из `docs/roadmap.md`
- Перед началом работы понять, какой шаг нужно выполнить
- После завершения задачи редактировать `docs/roadmap.md`, отмечая выполненные шаги галочкой
- В конце ответа писать: **"🔄Roadmap has been updated"** + список выполненных шагов в формате `[X] Step name`
- Не опережать roadmap: реализовывать только то, что явно запрошено

### Кодогенерация

- **Не дублировать код** (DRY principle)
- **Early returns** для читаемости
- **Descriptive names**: `handleClick`, `handleKeyDown` и т.д.
- **TypeScript**: всегда типизировать
- **Accessibility**: tabindex, aria-label, on:click, on:keydown
- **Consts вместо functions**: `const toggle = () => { ... }`

### Безопасность

- НЕ ломать существующий функционал
- НЕ создавать уязвимости (XSS, CSRF, SQL injection)
- НЕ экспонировать стектрейсы пользователям
- Валидация на клиенте И сервере
- Строгая изоляция данных пользователей

### Production-Ready

Код должен быть готов к деплою завтра. Новая команда начнёт работу послезавтра. Архитектура должна быть:
- Понятной
- Простой (без over-engineering)
- Единообразной (похожие фичи реализованы одинаково)
- Безопасной (no data leaks, tenant isolation)

## Deployment

### Backend
```bash
git clone <repo>
cd fuel-tracker-backend
# Создать .env на основе env.example
docker-compose up
# API доступен на http://localhost:8000
```

### Frontend
```bash
git clone <repo>
cd fuel-tracker-frontend
npm install
npm run dev
# UI доступен на http://localhost:3000
```

## Переменные окружения

### Backend (.env)
```env
SECRET_KEY=your-secret-key-here
DEBUG=True
DB_NAME=fuel_tracker
DB_USER=fuel_user
DB_PASS=your-password
DB_HOST=localhost
DB_PORT=5432
REDIS_HOST=localhost
REDIS_PORT=6379
ALLOWED_HOSTS=localhost,127.0.0.1
CORS_ALLOWED_ORIGINS=http://localhost:3000
```

### Frontend (.env)
```env
VITE_API_URL=http://localhost:8000
```

## Дополнительно

- **Best practices**: Следовать DRF best practices из `fuel-tracker-backend/CLAUDE.md`
- **Zustand best practices**: Следовать Zustand best practices из `fuel-tracker-frontend/CLAUDE.md`
- **FSD architecture**: Соблюдать Feature-Sliced Design для frontend
- **No TODOs**: Код должен быть полностью реализован, без плейсхолдеров
