---
alwaysApply: true
---

# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## User Preferences

- **Communication Style**: Direct, expert level. Code and explanations without "here's how you can..." fluff
- **Environment**: Windows
- **Approach**: Conciseness, anticipate needs, treat as expert, arguments over authority
- **Security**: When updating codebase ensure 100% nothing breaks

## Project Overview

**Fuel Tracker** - MVP application for tracking vehicle fuel consumption. Consists of:
- **Backend**: Django REST Framework (fuel-tracker-backend/)
- **Frontend**: React + Vite + Zustand (fuel-tracker-frontend/)

### Main Documents
- [docs/brd.md](docs/brd.md) - Business Requirements
- [docs/arch.md](docs/arch.md) - Architecture
- [docs/rest-api.md](docs/rest-api.md) - REST API Specification
- [docs/test-cases.md](docs/test-cases.md) - Test Cases
- [docs/roadmap.md](docs/roadmap.md) - Development Plan

## Backend (Django REST Framework)

### Application Structure

```
fuel-tracker-backend/
â”œâ”€â”€ fuel_tracker/         # Main Django project
â”‚   â”œâ”€â”€ settings.py       # Settings (environment via python-decouple)
â”‚   â”œâ”€â”€ urls.py           # Root routing
â”‚   â”œâ”€â”€ middleware.py     # Custom middleware (CorrelationId, Logging, Security)
â”‚   â””â”€â”€ exceptions.py     # Exception handling
â”œâ”€â”€ api/                  # API application (vehicles, fuel entries, statistics)
â”‚   â”œâ”€â”€ models.py         # Vehicle, FuelEntry
â”‚   â”œâ”€â”€ serializers.py    # DRF serializers
â”‚   â”œâ”€â”€ views.py          # ViewSets and API views
â”‚   â”œâ”€â”€ services.py       # Business logic (metrics calculation, statistics)
â”‚   â”œâ”€â”€ permissions.py    # IsOwner permission
â”‚   â””â”€â”€ tests*.py         # Tests (91% coverage)
â”œâ”€â”€ users/                # Users and authentication
â”‚   â”œâ”€â”€ models.py         # Custom User model
â”‚   â”œâ”€â”€ serializers.py    # Serializers for auth and profile
â”‚   â”œâ”€â”€ views.py          # SignUp, SignIn, SignOut
â”‚   â”œâ”€â”€ backends.py       # Email authentication backend
â”‚   â””â”€â”€ tests.py          # Tests
â””â”€â”€ docker-compose.yml    # Postgres + Redis + App
```

### Key Commands

```bash
# Run (Docker)
docker-compose up

# Local development (Windows)
.\venv\Scripts\activate
python manage.py runserver

# Migrations
python manage.py migrate
python manage.py makemigrations

# Tests
python manage.py test                                    # All tests
python manage.py test api                                # API tests
python manage.py test api.tests.TestFuelEntryAPI         # Specific test class
python manage.py test api.tests.TestFuelEntryAPI.test_create_entry  # Specific test

# Generate test data
docker-compose exec app python manage.py seed_dev_data
docker-compose exec app python manage.py seed_dev_data --clear

# OpenAPI schema
python manage.py spectacular --color --file schema.yml

# Coverage
coverage run --source='.' manage.py test
coverage report
coverage html  # htmlcov/index.html
```

### Architectural Principles

1. **Data Isolation (Row-Level Security)**: All QuerySets are filtered by `user=request.user` in ViewSet `get_queryset()` methods
2. **Service Layer**: Business logic is encapsulated in `api/services.py` (not in models/views)
3. **Cascade Recalculations**: Changing/deleting FuelEntry triggers recalculation of dependent metrics via `FuelEntryService.recalculate_metrics()`
4. **Metric Storage**: All data (km, liters) is stored in metric units. Conversion to Imperial happens during serialization
5. **Caching**: Redis for dashboard statistics (TTL 60s)

### Business Rules

- **Odometer**: Monotonically increasing for each Vehicle. Validation in `FuelEntrySerializer.validate_odometer()`
- **Baseline entry**: First entry for Vehicle has no calculated metrics (distance_since_last=NULL)
- **Metrics**: `unit_price`, `distance_since_last`, `consumption_l_100km`, `cost_per_km` are calculated automatically in `FuelEntryService.calculate_entry_metrics()`
- **Transactionality**: All create/update/delete operations are performed in database transactions

### Database

- **PostgreSQL** with composite indexes for optimization (see `api/models.py` Meta.indexes)
- **Migrations**: Applied automatically when container starts (`docker-compose.yml`)
- **Seed data**: `python manage.py seed_dev_data` creates demo@example.com / demo123 and test@example.com / test123

### Authentication

- **Session-based** with CSRF tokens (DRF SessionAuthentication)
- **Email backend**: Users log in via email (not username). See `users/backends.py`
- **Rate limiting**: 5 req/min for auth endpoints (brute force protection)

### API Documentation

- **Swagger UI**: http://localhost:8000/api/v1/schema/swagger-ui/
- **ReDoc**: http://localhost:8000/api/v1/schema/redoc/
- **OpenAPI YAML**: http://localhost:8000/api/v1/schema/

### Security

- CORS: Whitelist origins via `CORS_ALLOWED_ORIGINS` env
- Security Headers: HSTS, X-Content-Type-Options, X-Frame-Options, Referrer-Policy
- Logging: Correlation ID, security events, centralized logs in `logs/`
- GDPR: Export (`GET /api/v1/users/me/export`) and deletion (`DELETE /api/v1/users/me`)

### Testing

- **55 automated tests** with **91% coverage**
- Tests organized: `tests.py`, `tests_vehicles.py`, `tests_fuel_entries.py`, `tests_services.py`
- Use Django TestCase with setUpTestData for fixtures

## Frontend (React + Vite + Zustand)

### Application Structure (FSD - Feature-Sliced Design)

```
fuel-tracker-frontend/src/
â”œâ”€â”€ app/                  # Application initialization
â”‚   â”œâ”€â”€ providers/        # QueryProvider, AuthProvider
â”‚   â”œâ”€â”€ router/           # React Router + ProtectedRoute
â”‚   â””â”€â”€ stores/           # Zustand stores (authStore, vehicleStore, userSettingsStore)
â”œâ”€â”€ pages/                # Pages (Auth, NotFound, Dashboard, etc.)
â”œâ”€â”€ features/             # Features (auth, user-settings, vehicles, fuel-entries)
â”‚   â”œâ”€â”€ auth/
â”‚   â”‚   â”œâ”€â”€ api/          # authApi.ts
â”‚   â”‚   â”œâ”€â”€ ui/           # SignInForm, SignUpForm
â”‚   â”‚   â”œâ”€â”€ model/        # useAuth.ts
â”‚   â”‚   â””â”€â”€ lib/          # authSchemas.ts (Zod validation)
â”‚   â””â”€â”€ ...
â”œâ”€â”€ entities/             # Business entities (user, vehicle, fuel-entry, statistics)
â”‚   â”œâ”€â”€ user/
â”‚   â”‚   â”œâ”€â”€ api/          # userApi.ts
â”‚   â”‚   â””â”€â”€ model/        # types.ts
â”‚   â””â”€â”€ ...
â”œâ”€â”€ shared/               # Shared resources
â”‚   â”œâ”€â”€ ui/               # shadcn/ui components
â”‚   â”œâ”€â”€ api/              # Axios instance, base API setup
â”‚   â”œâ”€â”€ lib/
â”‚   â”‚   â”œâ”€â”€ utils/        # formatters, validators, converters
â”‚   â”‚   â””â”€â”€ constants/    # routes, units
â”‚   â””â”€â”€ hooks/            # use-toast, use-mobile
â””â”€â”€ widgets/              # Composite UI components
```

### Key Commands

```bash
cd fuel-tracker-frontend

# Development
npm run dev                # Vite dev server (http://localhost:3000)

# Build
npm run build              # Production build
npm run build:dev          # Development build

# Tests
npm run test               # Vitest
npm run test:ui            # Vitest UI
npm run test:coverage      # Coverage report

# Linting
npm run lint               # ESLint

# Preview
npm run preview            # Preview production build
```

### Technology Stack

- **React 18** + **TypeScript**
- **Vite** (build tool)
- **React Router** v6
- **Zustand** (state management)
- **TanStack Query** (server state)
- **Axios** (HTTP client)
- **Zod** (validation)
- **React Hook Form** (forms)
- **shadcn/ui** (UI components, based on Radix UI)
- **Tailwind CSS** (styling)
- **Vitest** + **Testing Library** (testing)

### State Management (Zustand)

- **authStore**: Authentication, current user
- **vehicleStore**: List of vehicles
- **userSettingsStore**: User preferences (units, currency, timezone)

**Principles**:
- Colocated actions and state within store
- Persist middleware for authStore (localStorage)
- Selectors for computed values

### API Integration (TanStack Query)

- All API calls through `@tanstack/react-query`
- `queryClient` configured in `app/providers/QueryProvider.tsx`
- Axios instance in `shared/api/index.ts` with CSRF token handling
- API methods in `entities/{entity}/api/` and `features/{feature}/api/`

### Routing

- React Router v6 in `app/router/index.tsx`
- `ProtectedRoute` for private pages (auth check)
- Routes: `/`, `/auth`, `/dashboard`, `/vehicles`, `/fuel-entries`, `/settings`

### Forms & Validation

- **React Hook Form** + **Zod** for validation
- Validation schemas in `features/{feature}/lib/`
- shadcn/ui Form components with automatic errors

### Styling

- **Tailwind CSS** - main styling approach
- **CSS Modules / SASS** - not used, only Tailwind
- **shadcn/ui** - components already styled with Tailwind
- **Themes**: support via `next-themes` (light/dark)

## General Rules

### Roadmap Compliance

- **ALWAYS** follow the plan from `docs/roadmap.md`
- Before starting work understand which step needs to be completed
- After completing a task edit `docs/roadmap.md`, marking completed steps with a checkmark
- At the end of response write: **"ðŸ”„Roadmap has been updated"** + list of completed steps in format `[X] Step name`
- Don't get ahead of roadmap: implement only what's explicitly requested

### Code Generation

- **Don't duplicate code** (DRY principle)
- **Early returns** for readability
- **Descriptive names**: `handleClick`, `handleKeyDown`, etc.
- **TypeScript**: always type
- **Accessibility**: tabindex, aria-label, on:click, on:keydown
- **Consts instead of functions**: `const toggle = () => { ... }`

### Security

- DON'T break existing functionality
- DON'T create vulnerabilities (XSS, CSRF, SQL injection)
- DON'T expose stack traces to users
- Validation on client AND server
- Strict user data isolation

### Production-Ready

Code should be ready for deployment tomorrow. New team starts work the day after tomorrow. Architecture should be:
- Understandable
- Simple (without over-engineering)
- Consistent (similar features implemented the same way)
- Secure (no data leaks, tenant isolation)

## Deployment

### Backend
```bash
git clone <repo>
cd fuel-tracker-backend
# Create .env based on env.example
docker-compose up
# API available at http://localhost:8000
```

### Frontend
```bash
git clone <repo>
cd fuel-tracker-frontend
npm install
npm run dev
# UI available at http://localhost:3000
```

## Environment Variables

### Backend (.env)
```env
SECRET_KEY=your-secret-key-here
DEBUG=True
DB_NAME=fuel_tracker
DB_USER=fuel_user
DB_PASS=your-password
DB_HOST=localhost
DB_PORT=5432
REDIS_HOST=localhost
REDIS_PORT=6379
ALLOWED_HOSTS=localhost,127.0.0.1
CORS_ALLOWED_ORIGINS=http://localhost:3000
```

### Frontend (.env)
```env
VITE_API_URL=http://localhost:8000
```

## Additional Information

- **Best practices**: Follow DRF best practices from `fuel-tracker-backend/CLAUDE.md`
- **Zustand best practices**: Follow Zustand best practices from `fuel-tracker-frontend/CLAUDE.md`
- **FSD architecture**: Follow Feature-Sliced Design for frontend
- **No TODOs**: Code should be fully implemented, without placeholders
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## User Preferences

- **Communication Style**: Direct, expert level. Code and explanations without "here's how you can..." fluff
- **Language**: Respond in English
- **Environment**: Windows
- **Approach**: Conciseness, anticipate needs, treat as expert, arguments over authority
- **Security**: When updating codebase ensure 100% nothing breaks

## Project Overview

**Fuel Tracker** - MVP application for tracking vehicle fuel consumption. Consists of:
- **Backend**: Django REST Framework (fuel-tracker-backend/)
- **Frontend**: React + Vite + Zustand (fuel-tracker-frontend/)

### Main Documents
- [docs/brd.md](docs/brd.md) - Business Requirements
- [docs/arch.md](docs/arch.md) - Architecture
- [docs/rest-api.md](docs/rest-api.md) - REST API Specification
- [docs/test-cases.md](docs/test-cases.md) - Test Cases
- [docs/roadmap.md](docs/roadmap.md) - Development Plan

## Backend (Django REST Framework)

### Application Structure

```
fuel-tracker-backend/
â”œâ”€â”€ fuel_tracker/         # Main Django project
â”‚   â”œâ”€â”€ settings.py       # Settings (environment via python-decouple)
â”‚   â”œâ”€â”€ urls.py           # Root routing
â”‚   â”œâ”€â”€ middleware.py     # Custom middleware (CorrelationId, Logging, Security)
â”‚   â””â”€â”€ exceptions.py     # Exception handling
â”œâ”€â”€ api/                  # API application (vehicles, fuel entries, statistics)
â”‚   â”œâ”€â”€ models.py         # Vehicle, FuelEntry
â”‚   â”œâ”€â”€ serializers.py    # DRF serializers
â”‚   â”œâ”€â”€ views.py          # ViewSets and API views
â”‚   â”œâ”€â”€ services.py       # Business logic (metrics calculation, statistics)
â”‚   â”œâ”€â”€ permissions.py    # IsOwner permission
â”‚   â””â”€â”€ tests*.py         # Tests (91% coverage)
â”œâ”€â”€ users/                # Users and authentication
â”‚   â”œâ”€â”€ models.py         # Custom User model
â”‚   â”œâ”€â”€ serializers.py    # Serializers for auth and profile
â”‚   â”œâ”€â”€ views.py          # SignUp, SignIn, SignOut
â”‚   â”œâ”€â”€ backends.py       # Email authentication backend
â”‚   â””â”€â”€ tests.py          # Tests
â””â”€â”€ docker-compose.yml    # Postgres + Redis + App
```

### Key Commands

```bash
# Run (Docker)
docker-compose up

# Local development (Windows)
.\venv\Scripts\activate
python manage.py runserver

# Migrations
python manage.py migrate
python manage.py makemigrations

# Tests
python manage.py test                                    # All tests
python manage.py test api                                # API tests
python manage.py test api.tests.TestFuelEntryAPI         # Specific test class
python manage.py test api.tests.TestFuelEntryAPI.test_create_entry  # Specific test

# Generate test data
docker-compose exec app python manage.py seed_dev_data
docker-compose exec app python manage.py seed_dev_data --clear

# OpenAPI schema
python manage.py spectacular --color --file schema.yml

# Coverage
coverage run --source='.' manage.py test
coverage report
coverage html  # htmlcov/index.html
```

### Architectural Principles

1. **Data Isolation (Row-Level Security)**: All QuerySets are filtered by `user=request.user` in ViewSet `get_queryset()` methods
2. **Service Layer**: Business logic is encapsulated in `api/services.py` (not in models/views)
3. **Cascade Recalculations**: Changing/deleting FuelEntry triggers recalculation of dependent metrics via `FuelEntryService.recalculate_metrics()`
4. **Metric Storage**: All data (km, liters) is stored in metric units. Conversion to Imperial happens during serialization
5. **Caching**: Redis for dashboard statistics (TTL 60s)

### Business Rules

- **Odometer**: Monotonically increasing for each Vehicle. Validation in `FuelEntrySerializer.validate_odometer()`
- **Baseline entry**: First entry for Vehicle has no calculated metrics (distance_since_last=NULL)
- **Metrics**: `unit_price`, `distance_since_last`, `consumption_l_100km`, `cost_per_km` are calculated automatically in `FuelEntryService.calculate_entry_metrics()`
- **Transactionality**: All create/update/delete operations are performed in database transactions

### Database

- **PostgreSQL** with composite indexes for optimization (see `api/models.py` Meta.indexes)
- **Migrations**: Applied automatically when container starts (`docker-compose.yml`)
- **Seed data**: `python manage.py seed_dev_data` creates demo@example.com / demo123 and test@example.com / test123

### Authentication

- **Session-based** with CSRF tokens (DRF SessionAuthentication)
- **Email backend**: Users log in via email (not username). See `users/backends.py`
- **Rate limiting**: 5 req/min for auth endpoints (brute force protection)

### API Documentation

- **Swagger UI**: http://localhost:8000/api/v1/schema/swagger-ui/
- **ReDoc**: http://localhost:8000/api/v1/schema/redoc/
- **OpenAPI YAML**: http://localhost:8000/api/v1/schema/

### Security

- CORS: Whitelist origins via `CORS_ALLOWED_ORIGINS` env
- Security Headers: HSTS, X-Content-Type-Options, X-Frame-Options, Referrer-Policy
- Logging: Correlation ID, security events, centralized logs in `logs/`
- GDPR: Export (`GET /api/v1/users/me/export`) and deletion (`DELETE /api/v1/users/me`)

### Testing

- **55 automated tests** with **91% coverage**
- Tests organized: `tests.py`, `tests_vehicles.py`, `tests_fuel_entries.py`, `tests_services.py`
- Use Django TestCase with setUpTestData for fixtures

## Frontend (React + Vite + Zustand)

### Application Structure (FSD - Feature-Sliced Design)

```
fuel-tracker-frontend/src/
â”œâ”€â”€ app/                  # Application initialization
â”‚   â”œâ”€â”€ providers/        # QueryProvider, AuthProvider
â”‚   â”œâ”€â”€ router/           # React Router + ProtectedRoute
â”‚   â””â”€â”€ stores/           # Zustand stores (authStore, vehicleStore, userSettingsStore)
â”œâ”€â”€ pages/                # Pages (Auth, NotFound, Dashboard, etc.)
â”œâ”€â”€ features/             # Features (auth, user-settings, vehicles, fuel-entries)
â”‚   â”œâ”€â”€ auth/
â”‚   â”‚   â”œâ”€â”€ api/          # authApi.ts
â”‚   â”‚   â”œâ”€â”€ ui/           # SignInForm, SignUpForm
â”‚   â”‚   â”œâ”€â”€ model/        # useAuth.ts
â”‚   â”‚   â””â”€â”€ lib/          # authSchemas.ts (Zod validation)
â”‚   â””â”€â”€ ...
â”œâ”€â”€ entities/             # Business entities (user, vehicle, fuel-entry, statistics)
â”‚   â”œâ”€â”€ user/
â”‚   â”‚   â”œâ”€â”€ api/          # userApi.ts
â”‚   â”‚   â””â”€â”€ model/        # types.ts
â”‚   â””â”€â”€ ...
â”œâ”€â”€ shared/               # Shared resources
â”‚   â”œâ”€â”€ ui/               # shadcn/ui components
â”‚   â”œâ”€â”€ api/              # Axios instance, base API setup
â”‚   â”œâ”€â”€ lib/
â”‚   â”‚   â”œâ”€â”€ utils/        # formatters, validators, converters
â”‚   â”‚   â””â”€â”€ constants/    # routes, units
â”‚   â””â”€â”€ hooks/            # use-toast, use-mobile
â””â”€â”€ widgets/              # Composite UI components
```

### Key Commands

```bash
cd fuel-tracker-frontend

# Development
npm run dev                # Vite dev server (http://localhost:3000)

# Build
npm run build              # Production build
npm run build:dev          # Development build

# Tests
npm run test               # Vitest
npm run test:ui            # Vitest UI
npm run test:coverage      # Coverage report

# Linting
npm run lint               # ESLint

# Preview
npm run preview            # Preview production build
```

### Technology Stack

- **React 18** + **TypeScript**
- **Vite** (build tool)
- **React Router** v6
- **Zustand** (state management)
- **TanStack Query** (server state)
- **Axios** (HTTP client)
- **Zod** (validation)
- **React Hook Form** (forms)
- **shadcn/ui** (UI components, based on Radix UI)
- **Tailwind CSS** (styling)
- **Vitest** + **Testing Library** (testing)

### State Management (Zustand)

- **authStore**: Authentication, current user
- **vehicleStore**: List of vehicles
- **userSettingsStore**: User preferences (units, currency, timezone)

**Principles**:
- Colocated actions and state within store
- Persist middleware for authStore (localStorage)
- Selectors for computed values

### API Integration (TanStack Query)

- All API calls through `@tanstack/react-query`
- `queryClient` configured in `app/providers/QueryProvider.tsx`
- Axios instance in `shared/api/index.ts` with CSRF token handling
- API methods in `entities/{entity}/api/` and `features/{feature}/api/`

### Routing

- React Router v6 in `app/router/index.tsx`
- `ProtectedRoute` for private pages (auth check)
- Routes: `/`, `/auth`, `/dashboard`, `/vehicles`, `/fuel-entries`, `/settings`

### Forms & Validation

- **React Hook Form** + **Zod** for validation
- Validation schemas in `features/{feature}/lib/`
- shadcn/ui Form components with automatic errors

### Styling

- **Tailwind CSS** - main styling approach
- **CSS Modules / SASS** - not used, only Tailwind
- **shadcn/ui** - components already styled with Tailwind
- **Themes**: support via `next-themes` (light/dark)

## General Rules

### Roadmap Compliance

- **ALWAYS** follow the plan from `docs/roadmap.md`
- Before starting work understand which step needs to be completed
- After completing a task edit `docs/roadmap.md`, marking completed steps with a checkmark
- At the end of response write: **"ðŸ”„Roadmap has been updated"** + list of completed steps in format `[X] Step name`
- Don't get ahead of roadmap: implement only what's explicitly requested

### Code Generation

- **Don't duplicate code** (DRY principle)
- **Early returns** for readability
- **Descriptive names**: `handleClick`, `handleKeyDown`, etc.
- **TypeScript**: always type
- **Accessibility**: tabindex, aria-label, on:click, on:keydown
- **Consts instead of functions**: `const toggle = () => { ... }`

### Security

- DON'T break existing functionality
- DON'T create vulnerabilities (XSS, CSRF, SQL injection)
- DON'T expose stack traces to users
- Validation on client AND server
- Strict user data isolation

### Production-Ready

Code should be ready for deployment tomorrow. New team starts work the day after tomorrow. Architecture should be:
- Understandable
- Simple (without over-engineering)
- Consistent (similar features implemented the same way)
- Secure (no data leaks, tenant isolation)

## Deployment

### Backend
```bash
git clone <repo>
cd fuel-tracker-backend
# Create .env based on env.example
docker-compose up
# API available at http://localhost:8000
```

### Frontend
```bash
git clone <repo>
cd fuel-tracker-frontend
npm install
npm run dev
# UI available at http://localhost:3000
```

## Environment Variables

### Backend (.env)
```env
SECRET_KEY=your-secret-key-here
DEBUG=True
DB_NAME=fuel_tracker
DB_USER=fuel_user
DB_PASS=your-password
DB_HOST=localhost
DB_PORT=5432
REDIS_HOST=localhost
REDIS_PORT=6379
ALLOWED_HOSTS=localhost,127.0.0.1
CORS_ALLOWED_ORIGINS=http://localhost:3000
```

### Frontend (.env)
```env
VITE_API_URL=http://localhost:8000
```

## Additional Information

- **Best practices**: Follow DRF best practices from `fuel-tracker-backend/CLAUDE.md`
- **Zustand best practices**: Follow Zustand best practices from `fuel-tracker-frontend/CLAUDE.md`
- **FSD architecture**: Follow Feature-Sliced Design for frontend
- **No TODOs**: Code should be fully implemented, without placeholders
