# Generated by Django 5.2.7 on 2025-10-15 12:00

from django.db import migrations
from decimal import Decimal

def recalculate_metrics(apps, schema_editor):
    """
    Recalculate metrics for all existing fuel entries.
    """
    Vehicle = apps.get_model('api', 'Vehicle')
    FuelEntry = apps.get_model('api', 'FuelEntry')

    for vehicle in Vehicle.objects.all():
        # Sort by entry_date and odometer to handle multiple entries on same day
        entries = list(FuelEntry.objects.filter(
            vehicle_id=vehicle.id
        ).select_related('vehicle').order_by('entry_date', 'odometer'))

        if not entries:
            continue
        
        previous_entry = None
        for entry in entries:
            # Replicating calculate_metrics logic here
            entry.unit_price = entry.total_amount / entry.liters
            
            if previous_entry:
                distance = entry.odometer - previous_entry.odometer
            else:
                distance = entry.odometer - entry.vehicle.initial_odometer

            entry.distance_since_last = distance

            if distance > 0:
                entry.consumption_l_100km = (entry.liters / Decimal(distance)) * Decimal(100)
                entry.cost_per_km = entry.total_amount / Decimal(distance)
            else:
                entry.consumption_l_100km = None
                entry.cost_per_km = None
            
            previous_entry = entry

        update_fields = ['unit_price', 'distance_since_last', 'consumption_l_100km', 'cost_per_km']
        FuelEntry.objects.bulk_update(entries, update_fields)


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0004_vehicle_initial_odometer'),
    ]

    operations = [
        migrations.RunPython(recalculate_metrics, migrations.RunPython.noop),
    ]
