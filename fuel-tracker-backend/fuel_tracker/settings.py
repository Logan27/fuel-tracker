"""
Django settings for fuel_tracker project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config, Csv
from datetime import timedelta
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# SECURITY: Restrict ALLOWED_HOSTS to specific domains in production
# Set ALLOWED_HOSTS environment variable with comma-separated list of allowed hosts
# Example: ALLOWED_HOSTS=example.com,www.example.com,api.example.com
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')

# Only for local development - allows all hosts when DEBUG=True
if DEBUG:
    ALLOWED_HOSTS = ['*']

# ============================================================================
# Production Security Validation
# ============================================================================
# Check critical security settings in production
if not DEBUG:
    # Check SECRET_KEY
    if not SECRET_KEY or len(SECRET_KEY) < 50:
        raise ValueError(
            "CRITICAL SECURITY ERROR: SECRET_KEY must be set and at least 50 characters long in production. "
            "Set SECRET_KEY in .env file with a cryptographically secure random string."
        )
    
    if SECRET_KEY.startswith('django-insecure'):
        raise ValueError(
            "CRITICAL SECURITY ERROR: Insecure SECRET_KEY detected in production. "
            "Generate a new SECRET_KEY using: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'"
        )
    
    # Check ALLOWED_HOSTS
    if not ALLOWED_HOSTS or ALLOWED_HOSTS == ['*']:
        raise ValueError(
            "CRITICAL SECURITY ERROR: ALLOWED_HOSTS must be explicitly set in production. "
            "Set ALLOWED_HOSTS in .env file to specific domains (e.g., 'example.com,www.example.com')."
        )
    
    # Check CORS_ALLOWED_ORIGINS
    cors_origins_str = config('CORS_ALLOWED_ORIGINS', default='')
    if not cors_origins_str:
        print(
            "WARNING: CORS_ALLOWED_ORIGINS not set in production. "
            "This may allow unauthorized domains to access your API. "
            "Set CORS_ALLOWED_ORIGINS in .env file.",
            file=sys.stderr
        )

# Disable APPEND_SLASH for REST API (trailing slashes should be explicit in URLs)
APPEND_SLASH = False


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 3rd party
    'rest_framework',
    'corsheaders',
    'drf_spectacular',
    # Local
    'api',
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Custom middleware
    'fuel_tracker.middleware.CorrelationIdMiddleware',
    'fuel_tracker.middleware.RequestLoggingMiddleware',
    'fuel_tracker.middleware.SecurityEventMiddleware',
]

ROOT_URLCONF = 'fuel_tracker.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fuel_tracker.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT', cast=int),
    }
}

# Caches
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{config('REDIS_HOST')}:{config('REDIS_PORT', cast=int)}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = [
    'users.backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend', # Fallback to default backend
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,  # Minimum 8 characters (default 8, keep explicit)
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
# SECURITY: Restrict CORS to specific origins in production
# Set CORS_ALLOWED_ORIGINS environment variable with comma-separated list of allowed origins
# Example: CORS_ALLOWED_ORIGINS=https://app.example.com,https://www.example.com
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='http://localhost:3000,http://localhost:8000').split(',')
CORS_ALLOW_CREDENTIALS = True  # Allow cookies for auth

# CSRF Trusted Origins
# Django 4.0+ requires explicit CSRF_TRUSTED_ORIGINS for cross-origin requests
CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default='http://localhost:3000,http://localhost:8000').split(',')

# Security: Additional CORS settings
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']

# Only for local development - allows all origins when DEBUG=True
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
else:
    CORS_ALLOW_ALL_ORIGINS = False
    # In production CORS_ALLOWED_ORIGINS should be strict whitelist
    if CORS_ALLOWED_ORIGINS == ['http://localhost:3000', 'http://localhost:8000']:
        print(
            "WARNING: Using default CORS origins in production mode. "
            "Set CORS_ALLOWED_ORIGINS in .env to your actual domain(s).",
            file=sys.stderr
        )

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # Custom exception handler for standardized responses
    'EXCEPTION_HANDLER': 'fuel_tracker.exceptions.custom_exception_handler',
    # Do not set global pagination, it is specified in each ViewSet as needed
    'PAGE_SIZE': 25,
    # Rate Limiting / Throttling
    'DEFAULT_THROTTLE_CLASSES': [],  # Applied per-view for flexibility
    'DEFAULT_THROTTLE_RATES': {
        'auth': '5/minute',      # Authentication endpoints: 5 requests per minute
        'anon': '100/hour',      # Anonymous users: 100 requests per hour
        'user': '1000/hour',     # Authenticated users: 1000 requests per hour
    }
}

# ============================================================================
# Security Settings
# ============================================================================

# Session Security
SESSION_COOKIE_AGE = 3600  # 1 hour
SESSION_SAVE_EVERY_REQUEST = True  # Update session on every request
SESSION_COOKIE_HTTPONLY = True  # Not accessible to JavaScript
SESSION_COOKIE_SAMESITE = 'Lax'  # CSRF protection (Lax for auth endpoints)

if not DEBUG:
    # Production-only security settings
    SESSION_COOKIE_SECURE = True  # HTTPS only
    CSRF_COOKIE_SECURE = True  # HTTPS only
    SECURE_SSL_REDIRECT = True  # Redirect HTTP to HTTPS
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
else:
    # Development settings
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False

# CSRF Security
CSRF_COOKIE_HTTPONLY = False  # Needed for JS reading on frontend
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_USE_SESSIONS = False

# Content Security Policy (for XSS protection)
if not DEBUG:
    # In production can add django-csp middleware
    pass

SPECTACULAR_SETTINGS = {
    'TITLE': 'Fuel Tracker API',
    'DESCRIPTION': 'REST API for tracking vehicle fuel consumption, costs, and statistics. '
                   'This MVP application helps drivers record fuel fill-ups and analyze consumption/costs over time with multi-vehicle support.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SERVE_AUTHENTICATION_WITH_CSRF': True,
    'CONTACT': {
        'name': 'Fuel Tracker Team',
        'email': 'support@fueltracker.example.com',
    },
    'LICENSE': {
        'name': 'Proprietary',
    },
    'SERVERS': [
        {
            'url': 'http://localhost:8000',
            'description': 'Development server',
        },
    ],
    'TAGS': [
        {'name': 'Authentication', 'description': 'User registration, login, and logout operations'},
        {'name': 'Users', 'description': 'User profile management and GDPR operations'},
        {'name': 'Vehicles', 'description': 'Vehicle management operations'},
        {'name': 'Fuel Entries', 'description': 'Fuel entry CRUD operations with automatic metrics calculation'},
        {'name': 'Statistics', 'description': 'Dashboard statistics and analytics'},
    ],
    'SCHEMA_PATH_PREFIX': '/api/v1',
    'COMPONENT_SPLIT_REQUEST': True,
    'SORT_OPERATIONS': False,
    'PREPROCESSING_HOOKS': [],
    'POSTPROCESSING_HOOKS': [],
}

# Referrer Policy for information leakage protection
if not DEBUG:
    SECURE_REFERRER_POLICY = 'same-origin'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name} {module} {funcName}: {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/fuel_tracker.log',
            'maxBytes': 10 * 1024 * 1024,  # 10 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/security.log',
            'maxBytes': 10 * 1024 * 1024,  # 10 MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        # Root logger
        '': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Django loggers
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console', 'file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_file', 'console'],
            'level': 'WARNING',
            'propagate': False,
        },
        # App loggers
        'users': {
            'handlers': ['console', 'file', 'security_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'api': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'fuel_tracker': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

